# ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
# ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
#    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
#    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó    ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù 
#    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     
#    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     
#                                                                      
#  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
# ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
# ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
# ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
# ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
#  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

from TikTokLive import TikTokLiveClient
from TikTokLive.events import ConnectEvent, CommentEvent, GiftEvent, JoinEvent, LikeEvent, ShareEvent, FollowEvent
from colorama import Fore, Style, init
import asyncio
import os
import json
from datetime import datetime
import time
from pyfiglet import Figlet
import threading
from collections import defaultdict
import random
import string
import sqlite3
from typing import Dict, List, Optional, Tuple
import re
import requests
from bs4 import BeautifulSoup

# ======== C·∫§U H√åNH VIP PRO ======== #
init(autoreset=True)
os.system('cls' if os.name == 'nt' else 'clear')

class VIPConfig:
    # üîß C√†i ƒë·∫∑t h·ªá th·ªëng
    LUU_DATABASE = True           # L∆∞u v√†o SQLite database
    LUU_LOG_JSON = True           # L∆∞u d·ªØ li·ªáu v√†o file JSON
    AUTO_BACKUP = True            # T·ª± ƒë·ªông backup d·ªØ li·ªáu
    MAX_LOG_FILES = 10            # S·ªë l∆∞·ª£ng file log t·ªëi ƒëa
    
    # üåü T√≠nh nƒÉng VIP
    VOICE_READER = False          # ƒê·ªçc b√¨nh lu·∫≠n b·∫±ng gi·ªçng n√≥i (VIP)
    AUTO_REPLY = True             # T·ª± ƒë·ªông tr·∫£ l·ªùi b√¨nh lu·∫≠n
    ADVANCED_AI_MOD = True        # AI ph√°t hi·ªán spam/bot n√¢ng cao
    REAL_TIME_STATS = True        # Hi·ªÉn th·ªã th·ªëng k√™ th·ªùi gian th·ª±c
    GIFT_ALERTS = True            # Th√¥ng b√°o qu√† t·∫∑ng ƒë·∫∑c bi·ªát
    RAIN_MODE = False             # Ch·∫ø ƒë·ªô m∆∞a qu√† (VIP)
    
    # ‚öôÔ∏è C√†i ƒë·∫∑t hi·ªÉn th·ªã
    HIEN_THI_THOI_GIAN = True     
    TINH_TIEN_QUA = True          
    DEM_GIO = True                
    MAX_COMMENT_LEN = 50          
    HIEN_THI_GIO_BINH_LUAN = True 
    
    # üîí B·∫£o m·∫≠t
    LOC_TU_KHOA = ["mua acc", "b√°n", "spam", "http", "telegram", "admin", "hack", "cheat"]
    BLOCKED_USERS = []            # Danh s√°ch user b·ªã ch·∫∑n
    ALLOWED_LANGS = ["vi", "en"]  # Ng√¥n ng·ªØ cho ph√©p
    
    # üíé Qu√† VIP
    VIP_GIFTS = {
        "lion": 299000,
        "galaxy": 199000,
        "universe": 999000,
        "diamond": 50000
    }

# ======== TI·ªÜN √çCH VIP ======== #
class VIPUtils:
    @staticmethod
    def generate_id() -> str:
        """T·∫°o ID ng·∫´u nhi√™n cho session"""
        return ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    
    @staticmethod
    def tinh_tien_qua(diamond: int) -> str:
        """Chuy·ªÉn kim c∆∞∆°ng sang VNƒê v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp"""
        if diamond >= 1000000:
            return f"{diamond/1000000:.1f}M VNƒê"
        elif diamond >= 1000:
            return f"{diamond/1000:.1f}K VNƒê"
        return f"{diamond:,}üíé"
    
    @staticmethod
    def format_thoi_gian(seconds: int) -> str:
        """ƒê·ªãnh d·∫°ng th·ªùi gian t·ª´ gi√¢y -> HH:MM:SS"""
        hours, remainder = divmod(seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
    
    @staticmethod
    def rut_gon_text(text: str, max_len: int = 50) -> str:
        """R√∫t g·ªçn text v·ªõi ... n·∫øu qu√° d√†i"""
        if len(text) > max_len:
            return text[:max_len-3] + "..."
        return text
    
    @staticmethod
    def get_user_level(follower_count: int) -> str:
        """X√°c ƒë·ªãnh level ng∆∞·ªùi d√πng theo follower"""
        if follower_count > 1000000:
            return "üëë SI√äU VIP"
        elif follower_count > 500000:
            return "üíé VIP ƒê·∫∂C BI·ªÜT"
        elif follower_count > 100000:
            return "‚≠ê VIP"
        elif follower_count > 50000:
            return "üî• PRO"
        elif follower_count > 10000:
            return "üåô N·ªîI TI·∫æNG"
        return "üå± M·ªöI"

# ======== AI MODERATOR PRO ======== #
class AIModeratorPro:
    def __init__(self):
        self.user_activity = defaultdict(lambda: {'count': 0, 'last_time': 0})
        self.recent_comments = []
        self.bad_words = self.load_bad_words()
        
    def load_bad_words(self) -> List[str]:
        """T·∫£i danh s√°ch t·ª´ kh√≥a nh·∫°y c·∫£m t·ª´ file"""
        try:
            with open('bad_words.txt', 'r', encoding='utf-8') as f:
                return [line.strip() for line in f.readlines()]
        except:
            return VIPConfig.LOC_TU_KHOA
    
    def detect_spam(self, user: str, comment: str) -> bool:
        """Ph√°t hi·ªán spam v·ªõi thu·∫≠t to√°n n√¢ng cao"""
        now = time.time()
        user_data = self.user_activity[user]
        
        # Reset n·∫øu kh√¥ng ho·∫°t ƒë·ªông 15s
        if now - user_data['last_time'] > 15:
            user_data['count'] = 0
        
        # Ki·ªÉm tra h√†nh vi spam
        user_data['count'] += 1
        user_data['last_time'] = now
        
        # 1. Qu√° nhi·ªÅu comment trong th·ªùi gian ng·∫Øn
        if user_data['count'] > 8:
            return True
            
        # 2. Comment gi·ªëng nhau nhi·ªÅu l·∫ßn
        if len(self.recent_comments) > 5 and comment in self.recent_comments[-5:]:
            return True
            
        # 3. Ch·ª©a t·ª´ kh√≥a nh·∫°y c·∫£m
        if any(bad_word in comment.lower() for bad_word in self.bad_words):
            return True
            
        # 4. Link ho·∫∑c email
        if re.search(r'http[s]?://|www\.|@\S+\.\S+', comment):
            return True
            
        self.recent_comments.append(comment)
        return False

# ======== QU·∫¢N L√ù LIVESTREAM PRO ======== #
class LiveManagerPro:
    def __init__(self):
        self.session_id = VIPUtils.generate_id()
        self.start_time = time.time()
        self.stats = {
            'gifts': defaultdict(int),
            'total_value': 0,
            'likes': 0,
            'follows': 0,
            'shares': 0,
            'views': 0,
            'comments': 0
        }
        self.top_donors = {}
        self.gift_history = []
        self.vip_users = set()
        
        if VIPConfig.LUU_DATABASE:
            self.init_database()
    
    def init_database(self):
        """Kh·ªüi t·∫°o database SQLite"""
        self.conn = sqlite3.connect('tiktok_live.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS sessions (
                session_id TEXT PRIMARY KEY,
                room_id TEXT,
                start_time TEXT,
                duration INTEGER,
                total_gifts INTEGER,
                total_value INTEGER,
                total_likes INTEGER,
                total_follows INTEGER,
                total_shares INTEGER
            )
        ''')
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS gifts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                session_id TEXT,
                gift_name TEXT,
                gift_value INTEGER,
                sender TEXT,
                timestamp TEXT,
                FOREIGN KEY(session_id) REFERENCES sessions(session_id)
            )
        ''')
        self.conn.commit()
    
    def record_gift(self, gift_name: str, value: int, sender: str):
        """Ghi nh·∫≠n qu√† t·∫∑ng v√†o h·ªá th·ªëng"""
        self.stats['gifts'][gift_name] += value
        self.stats['total_value'] += value
        self.gift_history.append({
            'time': time.time(),
            'gift': gift_name,
            'value': value,
            'sender': sender
        })
        
        # C·∫≠p nh·∫≠t top ng∆∞·ªùi t·∫∑ng
        if sender not in self.top_donors:
            self.top_donors[sender] = 0
        self.top_donors[sender] += value
        
        # Ki·ªÉm tra qu√† VIP
        if gift_name.lower() in VIPConfig.VIP_GIFTS:
            self.vip_users.add(sender)
            
        # L∆∞u v√†o database n·∫øu enabled
        if VIPConfig.LUU_DATABASE:
            self.cursor.execute('''
                INSERT INTO gifts (session_id, gift_name, gift_value, sender, timestamp)
                VALUES (?, ?, ?, ?, ?)
            ''', (self.session_id, gift_name, value, sender, datetime.now().isoformat()))
            self.conn.commit()
    
    def get_live_duration(self) -> str:
        """L·∫•y th·ªùi l∆∞·ª£ng live"""
        return VIPUtils.format_thoi_gian(int(time.time() - self.start_time))
    
    def get_gifts_per_minute(self, minutes: int = 1) -> List[Dict]:
        """L·∫•y danh s√°ch qu√† trong N ph√∫t g·∫ßn nh·∫•t"""
        cutoff = time.time() - minutes * 60
        return [g for g in self.gift_history if g['time'] >= cutoff]
    
    def save_session(self):
        """L∆∞u th√¥ng tin session v√†o database"""
        if not VIPConfig.LUU_DATABASE:
            return
            
        duration = int(time.time() - self.start_time)
        self.cursor.execute('''
            INSERT INTO sessions (
                session_id, room_id, start_time, duration,
                total_gifts, total_value, total_likes,
                total_follows, total_shares
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            self.session_id, client.unique_id,
            datetime.fromtimestamp(self.start_time).isoformat(),
            duration, sum(self.stats['gifts'].values()),
            self.stats['total_value'], self.stats['likes'],
            self.stats['follows'], self.stats['shares']
        ))
        self.conn.commit()

# ======== H·ªÜ TH·ªêNG T∆Ø∆†NG T√ÅC T·ª∞ ƒê·ªòNG ======== #
class AutoInteraction:
    def __init__(self):
        self.last_reply_time = 0
        self.reply_cooldown = 30  # 30s gi·ªØa c√°c l·∫ßn reply
        self.common_questions = {
            "hello": "Xin ch√†o b·∫°n! C·∫£m ∆°n ƒë√£ tham gia livestream ‚ù§Ô∏è",
            "t√™n g√¨": "M√¨nh l√† Bot tr·ª£ l√Ω livestream nha ^^",
            "kh·ªèe kh√¥ng": "M√¨nh kh·ªèe l·∫Øm, c·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m üòä",
            "k·∫øt b·∫°n": "K·∫øt b·∫°n v·ªõi m√¨nh qua Facebook nh√©: fb.com/example",
            "instagram": "Follow m√¨nh tr√™n Instagram @example nh√©!",
            "youtube": "ƒêƒÉng k√Ω k√™nh YouTube c·ªßa m√¨nh nha: youtube.com/example"
        }
    
    def should_reply(self, comment: str, user: str) -> bool:
        """X√°c ƒë·ªãnh c√≥ n√™n tr·∫£ l·ªùi b√¨nh lu·∫≠n kh√¥ng"""
        if time.time() - self.last_reply_time < self.reply_cooldown:
            return False
            
        comment_lower = comment.lower()
        for keyword in self.common_questions:
            if keyword in comment_lower:
                return True
                
        # Tr·∫£ l·ªùi khi ƒë∆∞·ª£c tag ho·∫∑c h·ªèi tr·ª±c ti·∫øp
        if "@bot" in comment_lower or "bot ∆°i" in comment_lower:
            return True
            
        return False
    
    def generate_reply(self, comment: str) -> str:
        """T·∫°o c√¢u tr·∫£ l·ªùi t·ª± ƒë·ªông"""
        comment_lower = comment.lower()
        for keyword, reply in self.common_questions.items():
            if keyword in comment_lower:
                return reply
                
        # Tr·∫£ l·ªùi m·∫∑c ƒë·ªãnh
        replies = [
            "C·∫£m ∆°n b·∫°n ƒë√£ b√¨nh lu·∫≠n!",
            "B·∫°n mu·ªën h·ªèi g√¨ n√†o?",
            "M√¨nh ƒë√£ ghi nh·∫≠n b√¨nh lu·∫≠n c·ªßa b·∫°n ‚ù§Ô∏è",
            "Livestream ƒëang r·∫•t vui, c√πng tham gia nh√©!",
            "B·∫°n c√≥ th·ªÉ g·ª≠i c√¢u h·ªèi chi ti·∫øt h∆°n kh√¥ng?"
        ]
        return random.choice(replies)

# ======== GIAO DI·ªÜN VIP ======== #
class VIPInterface:
    @staticmethod
    def show_banner():
        """Hi·ªÉn th·ªã banner ƒë·∫πp m·∫Øt"""
        f = Figlet(font='slant')
        print(Fore.MAGENTA + f.renderText('VIP PRO'))
        print(Fore.CYAN + "‚ïê" * 70)
        print(Fore.YELLOW + "üåü C√îNG C·ª§ THEO D√ïI TIKTOK LIVE VIP PRO - B·∫¢N ƒê·ªòC QUY·ªÄN üåü")
        print(Fore.CYAN + "‚ïê" * 70)
        print(Fore.GREEN + "üî• T√çNH NƒÇNG VIP:")
        print(Fore.WHITE + "  üëë H·ªá th·ªëng AI ch·ªëng spam th√¥ng minh ƒëa t·∫ßng")
        print(Fore.WHITE + "  üíé Th·ªëng k√™ qu√† t·∫∑ng theo th·ªùi gian th·ª±c + Database")
        print(Fore.WHITE + "  üõ°Ô∏è H·ªá th·ªëng l·ªçc t·ª´ kh√≥a n√¢ng cao + User block")
        print(Fore.WHITE + "  ü§ñ T·ª± ƒë·ªông tr·∫£ l·ªùi b√¨nh lu·∫≠n th√¥ng minh")
        print(Fore.WHITE + "  üìä B√°o c√°o chi ti·∫øt ƒëa d·∫°ng + Xu·∫•t Excel")
        print(Fore.WHITE + "  ‚ö° T·ªëi ∆∞u hi·ªáu nƒÉng cao c·∫•p")
        print(Fore.CYAN + "‚ïê" * 70 + Style.RESET_ALL)
    
    @staticmethod
    def show_gift_alert(gift_name: str, sender: str, value: int):
        """Hi·ªÉn th·ªã th√¥ng b√°o qu√† VIP"""
        alert_box = [
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
            f"‚ïë   üéÅ  {Fore.YELLOW}QU√Ä VIP ƒê·∫∂C BI·ªÜT!{Style.RESET_ALL}   üéÅ  ‚ïë",
            "‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢",
            f"‚ïë {Fore.CYAN}Ng∆∞·ªùi g·ª≠i:{Style.RESET_ALL} {sender:<30} ‚ïë",
            f"‚ïë {Fore.MAGENTA}Lo·∫°i qu√†:{Style.RESET_ALL} {gift_name:<30} ‚ïë",
            f"‚ïë {Fore.GREEN}Gi√° tr·ªã:{Style.RESET_ALL} {VIPUtils.tinh_tien_qua(value):<30} ‚ïë",
            "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        ]
        for line in alert_box:
            print(line)
    
    @staticmethod
    def show_real_time_stats(manager: LiveManagerPro):
        """Hi·ªÉn th·ªã th·ªëng k√™ th·ªùi gian th·ª±c"""
        duration = manager.get_live_duration()
        total_gifts = sum(manager.stats['gifts'].values())
        total_value = manager.stats['total_value']
        
        stats_box = [
            "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó",
            f"‚ïë   üìä  {Fore.YELLOW}TH·ªêNG K√ä TH·ªúI GIAN TH·ª∞C{Style.RESET_ALL}   üìä  ‚ïë",
            "‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢",
            f"‚ïë {Fore.CYAN}Th·ªùi l∆∞·ª£ng:{Style.RESET_ALL} {duration:<30} ‚ïë",
            f"‚ïë {Fore.MAGENTA}T·ªïng qu√†:{Style.RESET_ALL} {total_gifts:<30} ‚ïë",
            f"‚ïë {Fore.GREEN}T·ªïng gi√° tr·ªã:{Style.RESET_ALL} {VIPUtils.tinh_tien_qua(total_value):<30} ‚ïë",
            f"‚ïë {Fore.BLUE}Likes:{Style.RESET_ALL} {manager.stats['likes']:<30} ‚ïë",
            f"‚ïë {Fore.CYAN}Theo d√µi m·ªõi:{Style.RESET_ALL} {manager.stats['follows']:<30} ‚ïë",
            "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        ]
        for line in stats_box:
            print(line)

# ======== KH·ªûI T·∫†O H·ªÜ TH·ªêNG ======== #
VIPInterface.show_banner()
room_id = input(Fore.YELLOW + "üé§ Nh·∫≠p ID TikTok ch·ªß ph√≤ng (B·ªè @): " + Style.RESET_ALL)

# Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn
client = TikTokLiveClient(unique_id=room_id)
manager = LiveManagerPro()
ai_mod = AIModeratorPro()
auto_interact = AutoInteraction() if VIPConfig.AUTO_REPLY else None

# ======== X·ª¨ L√ù S·ª∞ KI·ªÜN VIP ======== #
@client.on(ConnectEvent)
async def on_connect(event: ConnectEvent):
    print(f"\n{Fore.GREEN}‚úÖ ƒê√£ k·∫øt n·ªëi ƒë·∫øn: {Fore.CYAN}@{event.unique_id}")
    print(f"{Fore.YELLOW}‚è≥ ƒêang l·∫•y d·ªØ li·ªáu live...\n{Fore.CYAN}‚ïê" * 70)
    if VIPConfig.REAL_TIME_STATS:
        threading.Thread(target=show_periodic_stats, daemon=True).start()

@client.on(GiftEvent)
async def on_gift(event: GiftEvent):
    gift = event.gift
    quantity = event.repeat_count if gift.streakable else 1
    total_value = gift.diamond_count * quantity
    
    # Ghi nh·∫≠n qu√†
    manager.record_gift(gift.name, total_value, event.user.nickname)
    
    # Hi·ªÉn th·ªã th√¥ng tin
    time_prefix = f"{Fore.BLACK}[{datetime.now().strftime('%H:%M:%S')}] " if VIPConfig.HIEN_THI_THOI_GIAN else ""
    value_display = f"{Fore.CYAN}{VIPUtils.tinh_tien_qua(total_value)}" if VIPConfig.TINH_TIEN_QUA else ""
    
    # Ki·ªÉm tra qu√† VIP
    if gift.name.lower() in VIPConfig.VIP_GIFTS and VIPConfig.GIFT_ALERTS:
        VIPInterface.show_gift_alert(gift.name, event.user.nickname, total_value)
    else:
        print(f"{time_prefix}{Fore.YELLOW}üéÅ {event.user.nickname} "
              f"{Fore.MAGENTA}t·∫∑ng {gift.name} x{quantity} "
              f"{value_display}")

@client.on(CommentEvent)
async def on_comment(event: CommentEvent):
    user = event.user.nickname
    comment = event.comment
    
    # Ki·ªÉm tra spam/bot
    if VIPConfig.ADVANCED_AI_MOD and ai_mod.detect_spam(user, comment):
        time_prefix = f"{Fore.BLACK}[{datetime.now().strftime('%H:%M:%S')}] " if VIPConfig.HIEN_THI_GIO_BINH_LUAN else ""
        print(f"{time_prefix}{Fore.RED}üö´ Bot/Spam: {user}: {VIPUtils.rut_gon_text(comment, VIPConfig.MAX_COMMENT_LEN)}")
        return
    
    # T·ª± ƒë·ªông tr·∫£ l·ªùi
    if VIPConfig.AUTO_REPLY and auto_interact.should_reply(comment, user):
        reply = auto_interact.generate_reply(comment)
        print(f"{Fore.BLACK}[{datetime.now().strftime('%H:%M:%S')}] {Fore.GREEN}ü§ñ AUTO REPLY: {reply}")
        auto_interact.last_reply_time = time.time()
    
    # Hi·ªÉn th·ªã b√¨nh lu·∫≠n
    time_prefix = f"{Fore.BLACK}[{datetime.now().strftime('%H:%M:%S')}] " if VIPConfig.HIEN_THI_GIO_BINH_LUAN else ""
    user_level = VIPUtils.get_user_level(event.user.follower_count)
    print(f"{time_prefix}{Fore.BLUE}{user_level} {user}: {Fore.GREEN}{VIPUtils.rut_gon_text(comment, VIPConfig.MAX_COMMENT_LEN)}")

@client.on(LikeEvent)
async def on_like(event: LikeEvent):
    manager.stats['likes'] += event.count
    time_prefix = f"{Fore.BLACK}[{datetime.now().strftime('%H:%M:%S')}] " if VIPConfig.HIEN_THI_THOI_GIAN else ""
    print(f"{time_prefix}{Fore.YELLOW}‚ù§Ô∏è {event.user.nickname} th·∫£ {event.count} like | T·ªïng: {manager.stats['likes']}")

@client.on(FollowEvent)
async def on_follow(event: FollowEvent):
    manager.stats['follows'] += 1
    time_prefix = f"{Fore.BLACK}[{datetime.now().strftime('%H:%M:%S')}] " if VIPConfig.HIEN_THI_THOI_GIAN else ""
    print(f"{time_prefix}{Fore.CYAN}‚ú® {event.user.nickname} ƒë√£ theo d√µi | T·ªïng: {manager.stats['follows']}")

@client.on(ShareEvent)
async def on_share(event: ShareEvent):
    manager.stats['shares'] += 1
    time_prefix = f"{Fore.BLACK}[{datetime.now().strftime('%H:%M:%S')}] " if VIPConfig.HIEN_THI_THOI_GIAN else ""
    print(f"{time_prefix}{Fore.MAGENTA}üîÑ {event.user.nickname} ƒë√£ chia s·∫ª | T·ªïng: {manager.stats['shares']}")

@client.on(JoinEvent)
async def on_join(event: JoinEvent):
    time_prefix = f"{Fore.BLACK}[{datetime.now().strftime('%H:%M:%S')}] " if VIPConfig.HIEN_THI_THOI_GIAN else ""
    print(f"{time_prefix}{Fore.GREEN}üëã {event.user.nickname} ƒë√£ v√†o ph√≤ng")

# ======== TI·ªÜN √çCH B·ªî SUNG ======== #
def show_periodic_stats():
    """Hi·ªÉn th·ªã th·ªëng k√™ ƒë·ªãnh k·ª≥"""
    while True:
        time.sleep(60)  # M·ªói ph√∫t hi·ªÉn th·ªã 1 l·∫ßn
        if VIPConfig.REAL_TIME_STATS:
            VIPInterface.show_real_time_stats(manager)

def backup_data():
    """T·ª± ƒë·ªông backup d·ªØ li·ªáu"""
    if not VIPConfig.AUTO_BACKUP:
        return
        
    backup_dir = "backups"
    os.makedirs(backup_dir, exist_ok=True)
    
    # Backup database
    if VIPConfig.LUU_DATABASE:
        backup_file = os.path.join(backup_dir, f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db")
        with open(backup_file, 'wb') as f:
            for line in manager.conn.iterdump():
                f.write(f'{line}\n'.encode('utf-8'))
    
    # Backup logs
    if VIPConfig.LUU_LOG_JSON:
        log_data = {
            "session_id": manager.session_id,
            "room_id": room_id,
            "stats": manager.stats,
            "top_donors": dict(sorted(manager.top_donors.items(), key=lambda x: x[1], reverse=True)[:10]),
            "timestamp": datetime.now().isoformat()
        }
        backup_file = os.path.join(backup_dir, f"log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump(log_data, f, indent=4, ensure_ascii=False)

# ======== CH·∫†Y CH∆Ø∆†NG TR√åNH ======== #
if __name__ == "__main__":
    try:
        print(f"\n{Fore.YELLOW}üîÑ ƒêang k·∫øt n·ªëi...{Style.RESET_ALL}")
        
        # B·∫Øt ƒë·∫ßu c√°c ti·∫øn tr√¨nh n·ªÅn
        if VIPConfig.AUTO_BACKUP:
            threading.Thread(target=backup_data, daemon=True).start()
        
        client.run()
        
    except KeyboardInterrupt:
        # L∆∞u d·ªØ li·ªáu khi d·ª´ng
        manager.save_session()
        if VIPConfig.LUU_DATABASE:
            manager.conn.close()
        
        # Hi·ªÉn th·ªã b√°o c√°o t·ªïng k·∫øt
        print(f"\n{Fore.RED}‚õî ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")
        print(f"{Fore.CYAN}üìä B√ÅO C√ÅO T·ªîNG K·∫æT VIP:")
        print(f"‚è±Ô∏è Th·ªùi l∆∞·ª£ng live: {manager.get_live_duration()}")
        print(f"üéÅ T·ªïng qu√†: {sum(manager.stats['gifts'].values()):,} (Tr·ªã gi√°: {VIPUtils.tinh_tien_qua(manager.stats['total_value'])})")
        print(f"‚ù§Ô∏è T·ªïng like: {manager.stats['likes']:,}")
        print(f"‚ú® T·ªïng theo d√µi m·ªõi: {manager.stats['follows']:,}")
        print(f"üîÑ T·ªïng chia s·∫ª: {manager.stats['shares']:,}")
        
        # Top 3 ng∆∞·ªùi t·∫∑ng qu√†
        print(f"\n{Fore.YELLOW}üèÜ TOP NG∆Ø·ªúI T·∫∂NG QU√Ä:")
        top_donors = sorted(manager.top_donors.items(), key=lambda x: x[1], reverse=True)[:3]
        for i, (user, amount) in enumerate(top_donors, 1):
            print(f"  {i}. {Fore.CYAN}{user}: {Fore.GREEN}{VIPUtils.tinh_tien_qua(amount)}")
        
        # Qu√† ƒë∆∞·ª£c t·∫∑ng nhi·ªÅu nh·∫•t
        print(f"\n{Fore.MAGENTA}üéØ QU√Ä PH·ªî BI·∫æN NH·∫§T:")
        top_gifts = sorted(manager.stats['gifts'].items(), key=lambda x: x[1], reverse=True)[:3]
        for gift, count in top_gifts:
            print(f"  - {gift}: {count:,} l·∫ßn")
        
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå L·ªñI VIP: {e}")
        if VIPConfig.LUU_DATABASE:
            manager.conn.close()